// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/cert-csi/pkg/k8sclient (interfaces: KubeClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/kubeclientinterface.go -package=mocks github.com/dell/cert-csi/pkg/k8sclient KubeClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	csistoragecapacity "github.com/dell/cert-csi/pkg/k8sclient/resources/csistoragecapacity"
	metrics "github.com/dell/cert-csi/pkg/k8sclient/resources/metrics"
	node "github.com/dell/cert-csi/pkg/k8sclient/resources/node"
	pod "github.com/dell/cert-csi/pkg/k8sclient/resources/pod"
	pv "github.com/dell/cert-csi/pkg/k8sclient/resources/pv"
	pvc "github.com/dell/cert-csi/pkg/k8sclient/resources/pvc"
	replicationgroup "github.com/dell/cert-csi/pkg/k8sclient/resources/replicationgroup"
	sc "github.com/dell/cert-csi/pkg/k8sclient/resources/sc"
	statefulset "github.com/dell/cert-csi/pkg/k8sclient/resources/statefulset"
	va "github.com/dell/cert-csi/pkg/k8sclient/resources/va"
	volumegroupsnapshot "github.com/dell/cert-csi/pkg/k8sclient/resources/volumegroupsnapshot"
	v1 "github.com/dell/cert-csi/pkg/k8sclient/resources/volumesnapshot/v1"
	v1beta1 "github.com/dell/cert-csi/pkg/k8sclient/resources/volumesnapshot/v1beta1"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/api/core/v1"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockKubeClientInterface is a mock of KubeClientInterface interface.
type MockKubeClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubeClientInterfaceMockRecorder
	isgomock struct{}
}

// MockKubeClientInterfaceMockRecorder is the mock recorder for MockKubeClientInterface.
type MockKubeClientInterfaceMockRecorder struct {
	mock *MockKubeClientInterface
}

// NewMockKubeClientInterface creates a new mock instance.
func NewMockKubeClientInterface(ctrl *gomock.Controller) *MockKubeClientInterface {
	mock := &MockKubeClientInterface{ctrl: ctrl}
	mock.recorder = &MockKubeClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeClientInterface) EXPECT() *MockKubeClientInterfaceMockRecorder {
	return m.recorder
}

// CreateCSISCClient mocks base method.
func (m *MockKubeClientInterface) CreateCSISCClient(namespace string) (*csistoragecapacity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCSISCClient", namespace)
	ret0, _ := ret[0].(*csistoragecapacity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSISCClient indicates an expected call of CreateCSISCClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateCSISCClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSISCClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateCSISCClient), namespace)
}

// CreateMetricsClient mocks base method.
func (m *MockKubeClientInterface) CreateMetricsClient(namespace string) (*metrics.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricsClient", namespace)
	ret0, _ := ret[0].(*metrics.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricsClient indicates an expected call of CreateMetricsClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateMetricsClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricsClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateMetricsClient), namespace)
}

// CreateNamespace mocks base method.
func (m *MockKubeClientInterface) CreateNamespace(ctx context.Context, namespace string) (*v10.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", ctx, namespace)
	ret0, _ := ret[0].(*v10.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockKubeClientInterfaceMockRecorder) CreateNamespace(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateNamespace), ctx, namespace)
}

// CreateNamespaceWithSuffix mocks base method.
func (m *MockKubeClientInterface) CreateNamespaceWithSuffix(ctx context.Context, namespace string) (*v10.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespaceWithSuffix", ctx, namespace)
	ret0, _ := ret[0].(*v10.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespaceWithSuffix indicates an expected call of CreateNamespaceWithSuffix.
func (mr *MockKubeClientInterfaceMockRecorder) CreateNamespaceWithSuffix(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespaceWithSuffix", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateNamespaceWithSuffix), ctx, namespace)
}

// CreateNodeClient mocks base method.
func (m *MockKubeClientInterface) CreateNodeClient() (*node.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeClient")
	ret0, _ := ret[0].(*node.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeClient indicates an expected call of CreateNodeClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateNodeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateNodeClient))
}

// CreatePVCClient mocks base method.
func (m *MockKubeClientInterface) CreatePVCClient(namespace string) (*pvc.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVCClient", namespace)
	ret0, _ := ret[0].(*pvc.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVCClient indicates an expected call of CreatePVCClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreatePVCClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVCClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreatePVCClient), namespace)
}

// CreatePVClient mocks base method.
func (m *MockKubeClientInterface) CreatePVClient() (*pv.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVClient")
	ret0, _ := ret[0].(*pv.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVClient indicates an expected call of CreatePVClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreatePVClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreatePVClient))
}

// CreatePodClient mocks base method.
func (m *MockKubeClientInterface) CreatePodClient(namespace string) (*pod.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePodClient", namespace)
	ret0, _ := ret[0].(*pod.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePodClient indicates an expected call of CreatePodClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreatePodClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreatePodClient), namespace)
}

// CreateRGClient mocks base method.
func (m *MockKubeClientInterface) CreateRGClient() (*replicationgroup.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRGClient")
	ret0, _ := ret[0].(*replicationgroup.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRGClient indicates an expected call of CreateRGClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateRGClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRGClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateRGClient))
}

// CreateSCClient mocks base method.
func (m *MockKubeClientInterface) CreateSCClient() (*sc.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSCClient")
	ret0, _ := ret[0].(*sc.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSCClient indicates an expected call of CreateSCClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateSCClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSCClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateSCClient))
}

// CreateSnapshotBetaClient mocks base method.
func (m *MockKubeClientInterface) CreateSnapshotBetaClient(namespace string) (*v1beta1.SnapshotClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotBetaClient", namespace)
	ret0, _ := ret[0].(*v1beta1.SnapshotClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotBetaClient indicates an expected call of CreateSnapshotBetaClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateSnapshotBetaClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotBetaClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateSnapshotBetaClient), namespace)
}

// CreateSnapshotGAClient mocks base method.
func (m *MockKubeClientInterface) CreateSnapshotGAClient(namespace string) (*v1.SnapshotClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotGAClient", namespace)
	ret0, _ := ret[0].(*v1.SnapshotClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotGAClient indicates an expected call of CreateSnapshotGAClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateSnapshotGAClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotGAClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateSnapshotGAClient), namespace)
}

// CreateStatefulSetClient mocks base method.
func (m *MockKubeClientInterface) CreateStatefulSetClient(namespace string) (*statefulset.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatefulSetClient", namespace)
	ret0, _ := ret[0].(*statefulset.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatefulSetClient indicates an expected call of CreateStatefulSetClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateStatefulSetClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatefulSetClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateStatefulSetClient), namespace)
}

// CreateVGSClient mocks base method.
func (m *MockKubeClientInterface) CreateVGSClient() (*volumegroupsnapshot.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVGSClient")
	ret0, _ := ret[0].(*volumegroupsnapshot.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVGSClient indicates an expected call of CreateVGSClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateVGSClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVGSClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateVGSClient))
}

// CreateVaClient mocks base method.
func (m *MockKubeClientInterface) CreateVaClient(namespace string) (*va.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVaClient", namespace)
	ret0, _ := ret[0].(*va.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVaClient indicates an expected call of CreateVaClient.
func (mr *MockKubeClientInterfaceMockRecorder) CreateVaClient(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVaClient", reflect.TypeOf((*MockKubeClientInterface)(nil).CreateVaClient), namespace)
}

// DeleteNamespace mocks base method.
func (m *MockKubeClientInterface) DeleteNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockKubeClientInterfaceMockRecorder) DeleteNamespace(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockKubeClientInterface)(nil).DeleteNamespace), ctx, namespace)
}

// GetClientSet mocks base method.
func (m *MockKubeClientInterface) GetClientSet() kubernetes.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSet")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// GetClientSet indicates an expected call of GetClientSet.
func (mr *MockKubeClientInterfaceMockRecorder) GetClientSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSet", reflect.TypeOf((*MockKubeClientInterface)(nil).GetClientSet))
}

// GetMinor mocks base method.
func (m *MockKubeClientInterface) GetMinor() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinor")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMinor indicates an expected call of GetMinor.
func (mr *MockKubeClientInterfaceMockRecorder) GetMinor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinor", reflect.TypeOf((*MockKubeClientInterface)(nil).GetMinor))
}

// NamespaceExists mocks base method.
func (m *MockKubeClientInterface) NamespaceExists(ctx context.Context, namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceExists", ctx, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamespaceExists indicates an expected call of NamespaceExists.
func (mr *MockKubeClientInterfaceMockRecorder) NamespaceExists(ctx, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceExists", reflect.TypeOf((*MockKubeClientInterface)(nil).NamespaceExists), ctx, namespace)
}

// SnapshotClassExists mocks base method.
func (m *MockKubeClientInterface) SnapshotClassExists(snapClass string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotClassExists", snapClass)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotClassExists indicates an expected call of SnapshotClassExists.
func (mr *MockKubeClientInterfaceMockRecorder) SnapshotClassExists(snapClass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotClassExists", reflect.TypeOf((*MockKubeClientInterface)(nil).SnapshotClassExists), snapClass)
}

// StorageClassExists mocks base method.
func (m *MockKubeClientInterface) StorageClassExists(ctx context.Context, storageClass string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageClassExists", ctx, storageClass)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageClassExists indicates an expected call of StorageClassExists.
func (mr *MockKubeClientInterfaceMockRecorder) StorageClassExists(ctx, storageClass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageClassExists", reflect.TypeOf((*MockKubeClientInterface)(nil).StorageClassExists), ctx, storageClass)
}

// Timeout mocks base method.
func (m *MockKubeClientInterface) Timeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockKubeClientInterfaceMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockKubeClientInterface)(nil).Timeout))
}
