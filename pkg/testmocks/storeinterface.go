/*
 *
 * Copyright Â© 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/cert-csi/pkg/store (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=mocks/storeinterface.go -package=mocks github.com/dell/cert-csi/pkg/store Store
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	store "github.com/dell/cert-csi/pkg/store"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateEntitiesRelation mocks base method.
func (m *MockStore) CreateEntitiesRelation(entity1, entity2 store.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntitiesRelation", entity1, entity2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntitiesRelation indicates an expected call of CreateEntitiesRelation.
func (mr *MockStoreMockRecorder) CreateEntitiesRelation(entity1, entity2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntitiesRelation", reflect.TypeOf((*MockStore)(nil).CreateEntitiesRelation), entity1, entity2)
}

// FailedTestCase mocks base method.
func (m *MockStore) FailedTestCase(ts *store.TestCase, endTimestamp time.Time, errMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailedTestCase", ts, endTimestamp, errMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailedTestCase indicates an expected call of FailedTestCase.
func (mr *MockStoreMockRecorder) FailedTestCase(ts, endTimestamp, errMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailedTestCase", reflect.TypeOf((*MockStore)(nil).FailedTestCase), ts, endTimestamp, errMsg)
}

// GetEntities mocks base method.
func (m *MockStore) GetEntities(whereConditions store.Conditions, orderBy string, limit int) ([]store.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntities", whereConditions, orderBy, limit)
	ret0, _ := ret[0].([]store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntities indicates an expected call of GetEntities.
func (mr *MockStoreMockRecorder) GetEntities(whereConditions, orderBy, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntities", reflect.TypeOf((*MockStore)(nil).GetEntities), whereConditions, orderBy, limit)
}

// GetEntitiesWithEventsByTestCaseAndEntityType mocks base method.
func (m *MockStore) GetEntitiesWithEventsByTestCaseAndEntityType(tc *store.TestCase, eType store.EntityTypeEnum) (map[store.Entity][]store.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesWithEventsByTestCaseAndEntityType", tc, eType)
	ret0, _ := ret[0].(map[store.Entity][]store.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesWithEventsByTestCaseAndEntityType indicates an expected call of GetEntitiesWithEventsByTestCaseAndEntityType.
func (mr *MockStoreMockRecorder) GetEntitiesWithEventsByTestCaseAndEntityType(tc, eType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesWithEventsByTestCaseAndEntityType", reflect.TypeOf((*MockStore)(nil).GetEntitiesWithEventsByTestCaseAndEntityType), tc, eType)
}

// GetEntityRelations mocks base method.
func (m *MockStore) GetEntityRelations(event store.Entity) ([]store.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityRelations", event)
	ret0, _ := ret[0].([]store.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityRelations indicates an expected call of GetEntityRelations.
func (mr *MockStoreMockRecorder) GetEntityRelations(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityRelations", reflect.TypeOf((*MockStore)(nil).GetEntityRelations), event)
}

// GetEvents mocks base method.
func (m *MockStore) GetEvents(whereConditions store.Conditions, orderBy string, limit int) ([]store.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", whereConditions, orderBy, limit)
	ret0, _ := ret[0].([]store.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockStoreMockRecorder) GetEvents(whereConditions, orderBy, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockStore)(nil).GetEvents), whereConditions, orderBy, limit)
}

// GetNumberEntities mocks base method.
func (m *MockStore) GetNumberEntities(whereConditions store.Conditions, orderBy string, limit int) ([]store.NumberEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberEntities", whereConditions, orderBy, limit)
	ret0, _ := ret[0].([]store.NumberEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberEntities indicates an expected call of GetNumberEntities.
func (mr *MockStoreMockRecorder) GetNumberEntities(whereConditions, orderBy, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberEntities", reflect.TypeOf((*MockStore)(nil).GetNumberEntities), whereConditions, orderBy, limit)
}

// GetResourceUsage mocks base method.
func (m *MockStore) GetResourceUsage(whereConditions store.Conditions, orderBy string, limit int) ([]store.ResourceUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceUsage", whereConditions, orderBy, limit)
	ret0, _ := ret[0].([]store.ResourceUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceUsage indicates an expected call of GetResourceUsage.
func (mr *MockStoreMockRecorder) GetResourceUsage(whereConditions, orderBy, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceUsage", reflect.TypeOf((*MockStore)(nil).GetResourceUsage), whereConditions, orderBy, limit)
}

// GetTestCases mocks base method.
func (m *MockStore) GetTestCases(whereConditions store.Conditions, orderBy string, limit int) ([]store.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCases", whereConditions, orderBy, limit)
	ret0, _ := ret[0].([]store.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCases indicates an expected call of GetTestCases.
func (mr *MockStoreMockRecorder) GetTestCases(whereConditions, orderBy, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCases", reflect.TypeOf((*MockStore)(nil).GetTestCases), whereConditions, orderBy, limit)
}

// GetTestRuns mocks base method.
func (m *MockStore) GetTestRuns(whereConditions store.Conditions, orderBy string, limit int) ([]store.TestRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestRuns", whereConditions, orderBy, limit)
	ret0, _ := ret[0].([]store.TestRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestRuns indicates an expected call of GetTestRuns.
func (mr *MockStoreMockRecorder) GetTestRuns(whereConditions, orderBy, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestRuns", reflect.TypeOf((*MockStore)(nil).GetTestRuns), whereConditions, orderBy, limit)
}

// SaveEntities mocks base method.
func (m *MockStore) SaveEntities(entities []*store.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntities", entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntities indicates an expected call of SaveEntities.
func (mr *MockStoreMockRecorder) SaveEntities(entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntities", reflect.TypeOf((*MockStore)(nil).SaveEntities), entities)
}

// SaveEvents mocks base method.
func (m *MockStore) SaveEvents(events []*store.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvents", events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvents indicates an expected call of SaveEvents.
func (mr *MockStoreMockRecorder) SaveEvents(events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvents", reflect.TypeOf((*MockStore)(nil).SaveEvents), events)
}

// SaveNumberEntities mocks base method.
func (m *MockStore) SaveNumberEntities(nEntities []*store.NumberEntities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNumberEntities", nEntities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNumberEntities indicates an expected call of SaveNumberEntities.
func (mr *MockStoreMockRecorder) SaveNumberEntities(nEntities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNumberEntities", reflect.TypeOf((*MockStore)(nil).SaveNumberEntities), nEntities)
}

// SaveResourceUsage mocks base method.
func (m *MockStore) SaveResourceUsage(resUsages []*store.ResourceUsage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResourceUsage", resUsages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResourceUsage indicates an expected call of SaveResourceUsage.
func (mr *MockStoreMockRecorder) SaveResourceUsage(resUsages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResourceUsage", reflect.TypeOf((*MockStore)(nil).SaveResourceUsage), resUsages)
}

// SaveTestCase mocks base method.
func (m *MockStore) SaveTestCase(ts *store.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTestCase", ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTestCase indicates an expected call of SaveTestCase.
func (mr *MockStoreMockRecorder) SaveTestCase(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTestCase", reflect.TypeOf((*MockStore)(nil).SaveTestCase), ts)
}

// SaveTestRun mocks base method.
func (m *MockStore) SaveTestRun(tr *store.TestRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTestRun", tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTestRun indicates an expected call of SaveTestRun.
func (mr *MockStoreMockRecorder) SaveTestRun(tr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTestRun", reflect.TypeOf((*MockStore)(nil).SaveTestRun), tr)
}

// SuccessfulTestCase mocks base method.
func (m *MockStore) SuccessfulTestCase(ts *store.TestCase, endTimestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessfulTestCase", ts, endTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuccessfulTestCase indicates an expected call of SuccessfulTestCase.
func (mr *MockStoreMockRecorder) SuccessfulTestCase(ts, endTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessfulTestCase", reflect.TypeOf((*MockStore)(nil).SuccessfulTestCase), ts, endTimestamp)
}
